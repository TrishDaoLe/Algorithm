import java.util.Iterator;




public class Deque<Item> implements Iterable<Item> {
	private Node first; //link to least recently added node
	private Node last;  // link to the most recently added node
	private int queueSize;     //number of items on the queue
	
	private class Node {
		 Item item;
		 Node next; 
	}
	public Deque()   {
		first = null; 
        last = null; 
        
	}
	public boolean isEmpty(){
		return first == null;
	}
	public int size() { return queueSize;}
	
	public void addFirst(Item item){
		if (null == item) throw new java.lang.NullPointerException();
		Node oldfirst = first;
		first = new Node();
		first.item = item;
		
		if(last == null){
					last = first;}
		else first.next = oldfirst;
		
		queueSize++; 
	}
	
	public void addLast(Item item)
	{	if (null == item) throw new java.lang.NullPointerException();
	
		Node oldLast = last;		//code provided in the book
		last = new Node();
		last.item = item;
		last.next = null;
		if(isEmpty()) {first = last;}
		else 
				oldLast.next = last;
		
		queueSize++; 
		
		
	}
	public Item removeFirst(){
		// removing item from the beginning of the queue 
		
		if (isEmpty()) throw new java.util.NoSuchElementException();
        
		Item item = first.item;
		
        first = first.next;
        queueSize--;
        
         if (isEmpty()) last = null;  
        return item;
        

	}
		
		
	
	public Item removeLast()  {
		// removing the last item from the queue 
		if (isEmpty()) throw new java.util.NoSuchElementException();
		Item item = last.item;
		
		 for(Node x = first; x!=null; x=x.next){		// for loop for iterating through a 
			 											//queue given in the book
			x.next = null; 
			queueSize--;
		}
		
		return item;
	}

	
	
	public Iterator<Item> iterator() {
		return new ListIterator();
	}
	private class ListIterator implements Iterator<Item>{
		private Node current = first;
		public boolean hasNext(){
			return current != null;
		}
		
		public Item next(){
			Item item = current.item;
			current = current.next;
			return item;
		}

		
		public void remove() {
			throw new java.lang.UnsupportedOperationException(); 
			
		}
	}
		
 public static void main(String[] args){
		
	 Deque<String> q = new Deque<String>();
	 	q.addFirst("Hello");
	 	q.addLast("Name");
	 	q.addLast("Is");
	 	System.out.println(q.size());
	 	System.out.println(q.removeFirst());
	 	System.out.println(q.size());
	 	q.addFirst("Yo");
	 	System.out.println(q.removeFirst());
	 90
	 	
	 	
}		
 	
     }

			
			
			
		
		 
	  
		
		


