import java.util.Iterator;
import java.util.Random;

import Deque.Node;

public class RandomizedQueue<Item> implements Iterable<Item> {
	 private int N;         // number of elements on queue
	    private Node first;    // beginning of queue
	    private Node last;     // end of queue
	    private Random randomGen; // a random number generator 
	    
	    private class Node {
	        Item item;
	        Node next;
	    }
	    
	public RandomizedQueue()
	{	
     	// construct an empty randomized queue
		first = new Node();
		first.next = null;
		first.item = null;
		first = last;
		randomGen = new Random();}
		
       
	
	public boolean isEmpty() {
        return first == null;
    }

	public int size() {
        return N;     
    }
	
	public void enqueue(Item item)  { 	// code provided in the book 
		Node node = new Node();
        node.item = item;
        if (isEmpty()) { first = node;     last = node; }
        else           { last.next = node; last = node; }
        N++;
	}
	
	public Item dequeue() {
		 // delete and return a random item
		 if (isEmpty()) throw new java.util.NoSuchElementException();
		 int random = randomGen.nextInt()%N; 
		
		 if(random == 0){
			 Item item = first.item;
				first = first.next;
		        N--;
		        if (isEmpty()) last = null;  
		 } else if (random == N-1){
			 Item item = last.item;
				
			 for(Node x = first; x!=null; x=x.next){		// for loop for iterating through a 
				 											//queue given in the book
				x.next = null; 
				N--;
			}
			 }
			 else for(Node m = first; m!= random(); m=m.next){
				 
				 m.next = m.next.next;
				 N++;
			 }
		  		
				 return null; 
	      
	}
	public Item sample()   
		// return (but do not delete) a random item
	{	if (isEmpty())
        throw new java.util.NoSuchElementException(); 
	
		else{	 int random = randomGen.nextInt()%N; 
		for(Node m = first; m = random(); m=m.next){
			 
			 return m.item; 
		 }
			
		}
	
		
		
	}

	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

	@Override
	public Iterator<Item> iterator() {
		return new ListIterator();							// Iterator code is provided in the book
	}
	private class ListIterator implements Iterator<Item>{
		private Node current = first;
		public boolean hasNext(){
			return current != null;
		}
		
		public Item next(){
			Item item = current.item;
			current = current.next;
			return item;
		}

		
		public void remove() {
			throw new java.lang.UnsupportedOperationException(); 
			
		}
	}

}
